package com.viewpager;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

import com.dropbox.client2.DropboxAPI;
import com.dropbox.client2.DropboxAPI.DropboxFileInfo;
import com.dropbox.client2.DropboxAPI.Entry;
import com.dropbox.client2.ProgressListener;
import com.dropbox.client2.android.AndroidAuthSession;
import com.dropbox.client2.exception.DropboxException;
import com.dropbox.client2.session.AccessTokenPair;
import com.dropbox.client2.session.AppKeyPair;
import com.dropbox.client2.session.Session.AccessType;

import android.os.AsyncTask;
import android.os.Bundle;
import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentPagerAdapter;
import android.support.v4.view.ViewPager;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.ImageView;

public class MainActivity extends FragmentActivity {
	
	final static private String APP_KEY = "8ovhw4scqn8rbz4";
	final static private String APP_SECRET = "0gghr7fghh46t8k";
	final static private AccessType ACCESS_TYPE = AccessType.APP_FOLDER;
	public static boolean downloadComic = false;
	public static String comicFileName = "";
	
	private DropboxAPI<AndroidAuthSession> mDBApi;
	
	private MyAdapter mAdapter;
    private ViewPager mPager;
   

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		
		AppKeyPair appKeys = new AppKeyPair(APP_KEY, APP_SECRET);
		AndroidAuthSession session = new AndroidAuthSession(appKeys, ACCESS_TYPE);
		mDBApi = new DropboxAPI<AndroidAuthSession>(session);

		mDBApi.getSession().startAuthentication(MainActivity.this);

		
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.activity_main, menu);
		return true;
	}
	
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
	    // Handle item selection
	    switch (item.getItemId()) {
	        case R.id.load_comic:
	        	new ListFilesDropbox(this).execute(mDBApi);
	            return true;
	        default:
	            return super.onOptionsItemSelected(item);
	    }
	}

	@SuppressWarnings("unchecked")
	protected void onResume(){
		super.onResume();


		if (mDBApi.getSession().authenticationSuccessful()) {
			try {
				// Required to complete auth, sets the access token on the session
				mDBApi.getSession().finishAuthentication();

				AccessTokenPair tokens = mDBApi.getSession().getAccessTokenPair();
				Log.i("DbAuthLog", "Authentication Complete");

				if (launch) {
					new ListFilesDropbox(this).execute(mDBApi);
					launch = false;
				}
				else if (downloadComic){
					downloadComic(comicFileName);
					downloadComic = false;
				}
				//

			} catch (IllegalStateException e) {
				Log.i("DbAuthLog", "Error authenticating", e);
			}
		}

	}

	public void downloadComic (String fileLocation){
		new DownloadFileDropbox(getFilesDir().getAbsolutePath() ,fileLocation, this).execute(mDBApi);
	}
	
	
	
	boolean launch = true;
	static int pages = 0;
	static ArrayList<ByteArrayOutputStream> comicPages = new ArrayList<ByteArrayOutputStream>();
	
	boolean hotfix = false;
	public void set (byte[] data){
		if (!hotfix){

			Log.i("DBFile", "Attempting byte to imageview");
			Bitmap bitmap = BitmapFactory.decodeByteArray(data, 0, data.length);
			ImageView iv = (ImageView)findViewById(R.id.imageView2);
			iv.setImageBitmap(bitmap);
			hotfix = true;
		}
	}



	public void unzip (File f1){

		Log.i("DBFile", f1.getAbsolutePath());
		String zipFile = f1.getAbsolutePath();
		String location = f1.getAbsolutePath().substring(0, f1.getAbsolutePath().lastIndexOf("/"));
		try {
			File f = new File(location);
			if(!f.isDirectory()) {
				f.mkdirs();
			}
			FileInputStream fis = new FileInputStream(zipFile);
			ZipInputStream zin = new ZipInputStream(fis);
			try {
				ZipEntry ze = null;

				while ((ze = zin.getNextEntry()) != null) {

					String filename = ze.getName();
					Log.i ("DBUnzip","Filename: " + filename);

					ByteArrayOutputStream o = new ByteArrayOutputStream();

					int r;
					byte [] buf = new byte[4096];
					while ((r = zin.read(buf)) != -1) {
						o.write(buf,0,r);
					} 
					o.close();

					comicPages.add(o);

				}
			}
			finally {
				zin.close();
			}
		}
		catch (Exception e) {
			Log.e("DBFile", "Unzip exception", e);
		}

		//set(bros.get(0).toByteArray());
		
		mAdapter = new MyAdapter(getSupportFragmentManager());
		mPager = (ViewPager) findViewById(R.id.pager);
		mPager.setAdapter(mAdapter);
	  
	}
	
	public static class MyAdapter extends FragmentPagerAdapter {
		public MyAdapter(FragmentManager fm) {
			super(fm);
		}

		@Override
		public int getCount() {
			return comicPages.size();
		}

		@Override
		public Fragment getItem(int position) {
			
			if (position < comicPages.size()){
				return new ImageFragment(comicPages.get(position).toByteArray());
					
			}
			else{
				return null;
			}
			
		
		}
	}
}



class ListFilesDropbox extends AsyncTask <DropboxAPI<AndroidAuthSession> , Integer, String[]>{

	private MainActivity a;
	
	public ListFilesDropbox(MainActivity a){
		this.a = a;
	}
	
	@Override
	protected String[] doInBackground(DropboxAPI<AndroidAuthSession>... params) {
		String[] dbfiles = null;
		Entry entries;
		try {
			entries = params[0].metadata("/", 100, null, true, null);
			dbfiles = new String[entries.contents.size()];
			int i = 0;
			for (Entry e : entries.contents) {
			    if (!e.isDeleted) {
			        Log.i("Is Folder",String.valueOf(e.isDir));
			        Log.i("Item Name",e.fileName());
			        dbfiles[i] = e.fileName();
			    }
			    i++;
			}
		} catch (DropboxException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		return dbfiles;
	}
	
	protected void onProgressUpdate(Integer... progress){
		
	}

	protected void onPostExecute(String[] rev) {
		Intent i = new Intent(a, DBListActivity.class);
		i.putExtra("dbfiles", rev);
		
		a.startActivity(i);

	}
	
}

class DownloadFileDropbox extends AsyncTask <DropboxAPI<AndroidAuthSession> , Long, File>{

	private String dir;
	private String fileName;
	private MainActivity a;
	ProgressDialog dialog = null;

	public DownloadFileDropbox(String dir, String file, MainActivity a){
		this.dir = dir;
		this.fileName = file;
		this.a = a;
	}

	@Override
	protected File doInBackground(DropboxAPI<AndroidAuthSession>... params) {


		try{
			File file= new File( dir + fileName);
			FileOutputStream outputStream = new FileOutputStream(file);
			DropboxFileInfo info = params[0].getFile(fileName, null, outputStream, new ProgressListener(){

				@Override
				public void onProgress(long bytes, long total) {
					Integer[] bytess = {(int) bytes, (int) total};
				    publishProgress(bytess);
				}
				
			});			
			Log.i("DbExampleLog", "The file's rev is: " + info.getMetadata().rev);
			return file;
		}
		catch (Exception e){
			Log.i("DbExampleLog", e.toString());
		}

		return null;
	}
	
	 @Override
	    protected void onPreExecute() {

	        super.onPreExecute();
	         dialog = ProgressDialog.show(a, "Loading your comic...", "", true);
	    }

	protected void onProgressUpdate(Integer... progress){
		
		int percent = (int)(100.0*(double)progress[0]/progress[1]+ 0.5); 
		Log.i("DbExampleLog", "Downloading file...");
		
	}

	protected void onPostExecute(File rev) {
		dialog.dismiss(); 
		Log.i("DbExampleLog", "File has completed downloading.");
		a.unzip(rev);

	}

}



