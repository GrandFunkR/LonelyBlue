package com.cloudcomic;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

import com.cloudcomic.util.SystemUiHider;
import com.dropbox.client2.DropboxAPI;
import com.dropbox.client2.DropboxAPI.DropboxFileInfo;
import com.dropbox.client2.android.AndroidAuthSession;
import com.dropbox.client2.session.AccessTokenPair;
import com.dropbox.client2.session.AppKeyPair;
import com.dropbox.client2.session.Session.AccessType;

import android.annotation.TargetApi;
import android.app.Activity;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.widget.ImageView;

/**
 * An example full-screen activity that shows and hides the system UI (i.e.
 * status bar and navigation/system bar) with user interaction.
 * 
 * @see SystemUiHider
 */
public class FullscreenActivity extends Activity {
	final static private String APP_KEY = "8ovhw4scqn8rbz4";
	final static private String APP_SECRET = "0gghr7fghh46t8k";
	final static private AccessType ACCESS_TYPE = AccessType.APP_FOLDER;

	private DropboxAPI<AndroidAuthSession> mDBApi;

	/**
	 * Whether or not the system UI should be auto-hidden after
	 * {@link #AUTO_HIDE_DELAY_MILLIS} milliseconds.
	 */
	private static final boolean AUTO_HIDE = true;

	/**
	 * If {@link #AUTO_HIDE} is set, the number of milliseconds to wait after
	 * user interaction before hiding the system UI.
	 */
	private static final int AUTO_HIDE_DELAY_MILLIS = 3000;
	
	/**
	 * If set, will toggle the system UI visibility upon interaction. Otherwise,
	 * will show the system UI visibility upon interaction.
	 */
	private static final boolean TOGGLE_ON_CLICK = true;

	/**
	 * The flags to pass to {@link SystemUiHider#getInstance}.
	 */
	private static final int HIDER_FLAGS = SystemUiHider.FLAG_HIDE_NAVIGATION;

	/**
	 * The instance of the {@link SystemUiHider} for this activity.
	 */
	private SystemUiHider mSystemUiHider;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		setContentView(R.layout.activity_fullscreen);

		final View controlsView = findViewById(R.id.fullscreen_content_controls);
		final View contentView = findViewById(R.id.fullscreen_content);

		// Set up an instance of SystemUiHider to control the system UI for
		// this activity.
		mSystemUiHider = SystemUiHider.getInstance(this, contentView,
				HIDER_FLAGS);
		mSystemUiHider.setup();
		mSystemUiHider
				.setOnVisibilityChangeListener(new SystemUiHider.OnVisibilityChangeListener() {
					// Cached values.
					int mControlsHeight;
					int mShortAnimTime;

					@Override
					@TargetApi(Build.VERSION_CODES.HONEYCOMB_MR2)
					public void onVisibilityChange(boolean visible) {
						if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {
							// If the ViewPropertyAnimator API is available
							// (Honeycomb MR2 and later), use it to animate the
							// in-layout UI controls at the bottom of the
							// screen.
							if (mControlsHeight == 0) {
								mControlsHeight = controlsView.getHeight();
							}
							if (mShortAnimTime == 0) {
								mShortAnimTime = getResources().getInteger(
										android.R.integer.config_shortAnimTime);
							}
							controlsView
									.animate()
									.translationY(visible ? 0 : mControlsHeight)
									.setDuration(mShortAnimTime);
						} else {
							// If the ViewPropertyAnimator APIs aren't
							// available, simply show or hide the in-layout UI
							// controls.
							controlsView.setVisibility(visible ? View.VISIBLE
									: View.GONE);
						}

						if (visible && AUTO_HIDE) {
							// Schedule a hide().
							delayedHide(AUTO_HIDE_DELAY_MILLIS);
						}
					}
				});

		// Set up the user interaction to manually show or hide the system UI.
		contentView.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View view) {
				if (TOGGLE_ON_CLICK) {
					mSystemUiHider.toggle();
				} else {
					mSystemUiHider.show();
				}
			}
		});

		// Upon interacting with UI controls, delay any scheduled hide()
		// operations to prevent the jarring behavior of controls going away
		// while interacting with the UI.
		findViewById(R.id.dummy_button).setOnTouchListener(
				mDelayHideTouchListener);
		
		AppKeyPair appKeys = new AppKeyPair(APP_KEY, APP_SECRET);
		AndroidAuthSession session = new AndroidAuthSession(appKeys, ACCESS_TYPE);
		mDBApi = new DropboxAPI<AndroidAuthSession>(session);

		mDBApi.getSession().startAuthentication(FullscreenActivity.this);

		
	}

	@Override
	protected void onPostCreate(Bundle savedInstanceState) {
		super.onPostCreate(savedInstanceState);

		// Trigger the initial hide() shortly after the activity has been
		// created, to briefly hint to the user that UI controls
		// are available.
		delayedHide(100);
	}

	/**
	 * Touch listener to use for in-layout UI controls to delay hiding the
	 * system UI. This is to prevent the jarring behavior of controls going away
	 * while interacting with activity UI.
	 */
	View.OnTouchListener mDelayHideTouchListener = new View.OnTouchListener() {
		@Override
		public boolean onTouch(View view, MotionEvent motionEvent) {
			if (AUTO_HIDE) {
				delayedHide(AUTO_HIDE_DELAY_MILLIS);
			}
			return false;
		}
	};

	Handler mHideHandler = new Handler();
	Runnable mHideRunnable = new Runnable() {
		@Override
		public void run() {
			mSystemUiHider.hide();
		}
	};

	/**
	 * Schedules a call to hide() in [delay] milliseconds, canceling any
	 * previously scheduled calls.
	 */
	private void delayedHide(int delayMillis) {
		mHideHandler.removeCallbacks(mHideRunnable);
		mHideHandler.postDelayed(mHideRunnable, delayMillis);
	}
	
	protected void onResume() {
	    super.onResume();

	    if (mDBApi.getSession().authenticationSuccessful()) {
	        try {
	            // Required to complete auth, sets the access token on the session
	            mDBApi.getSession().finishAuthentication();

	            AccessTokenPair tokens = mDBApi.getSession().getAccessTokenPair();
	            
	            Log.i("DbAuthLog", "Authentication Complete");

				new DownloadFileDropbox(getFilesDir().getAbsolutePath() ,"/a.cbz", this).execute(mDBApi);
	            
	        } catch (IllegalStateException e) {
	            Log.i("DbAuthLog", "Error authenticating", e);
	        }
	    }
	}
	
	
	boolean hotfix = false;
	public void set (byte[] data){
		if (!hotfix){

			Log.i("DBFile", "Attempting byte to imageview");
			Bitmap bitmap = BitmapFactory.decodeByteArray(data, 0, data.length);
			ImageView iv = (ImageView)findViewById(R.id.imageView1);
			iv.setImageBitmap(bitmap);
			hotfix = true;
		}
	}
	
	
	
	public void unzip (File f1){
		
		ArrayList<ByteArrayOutputStream> bros = new ArrayList<ByteArrayOutputStream>();
		
		Log.i("DBFile", f1.getAbsolutePath());
		String zipFile = f1.getAbsolutePath();
		String location = f1.getAbsolutePath().substring(0, f1.getAbsolutePath().lastIndexOf("/"));
		  try {
		        File f = new File(location);
		        if(!f.isDirectory()) {
		            f.mkdirs();
		        }
		        FileInputStream fis = new FileInputStream(zipFile);
		        ZipInputStream zin = new ZipInputStream(fis);
		        try {
		            ZipEntry ze = null;
		            
		            while ((ze = zin.getNextEntry()) != null) {

		                String filename = ze.getName();
		                Log.i ("DBUnzip","Filename: " + filename);
		                
		                ByteArrayOutputStream o = new ByteArrayOutputStream();
		                
		                int r;
		                byte [] buf = new byte[4096];
		                while ((r = zin.read(buf)) != -1) {
		                   o.write(buf,0,r);
		                } 
		                o.close();
		                
		                bros.add(o);
		                
		            /*	 //Log.i ("DBUnzip","Extracting: " + ze);
		            	
		                */
		            }
		        }
		        finally {
		            zin.close();
		        }
		    }
		    catch (Exception e) {
		        Log.e("DBFile", "Unzip exception", e);
		    }
		  
		  set(bros.get(0).toByteArray());
		  
		  for (int i = 0 ; i < bros.size() ; i++){
			  //add each image to gallery
		  }
		  
	}
	
	
}

class DownloadFileDropbox extends AsyncTask <DropboxAPI<AndroidAuthSession> , Integer, File>{

	private String dir;
	private String fileName;
	private FullscreenActivity a;
	
	public DownloadFileDropbox(String dir, String file, FullscreenActivity a){
		this.dir = dir;
		this.fileName = file;
		this.a = a;
	}

	@Override
	protected File doInBackground(DropboxAPI<AndroidAuthSession>... params) {
		// TODO Auto-generated method stub
		
		try{
			File file= new File( dir + fileName);
			FileOutputStream outputStream = new FileOutputStream(file);
			DropboxFileInfo info = params[0].getFile(fileName, null, outputStream, null);			
			Log.i("DbExampleLog", "The file's rev is: " + info.getMetadata().rev);
			return file;
		}
		catch (Exception e){

			Log.i("DbExampleLog", e.toString());

		}
		
		return null;
	}
	
	protected void onProgressUpdate(Integer... progress){
		Log.i("DbExampleLog", "Downloading file...");
	}
	
	protected void onPostExecute(File rev) {
		Log.i("DbExampleLog", "File has completed downloading.");
		a.unzip(rev);
		
    }
	
}

